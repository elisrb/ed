class Vertex:
    def __init__(self, key):
        self.id = key
        self.connect_to = {}
    def add_neighbor(self, nbr, weight=0):
        self.connect_to[nbr] = weight
    def del_neighbor(self, nbr):
        if self.connect_to[nbr]:
            return self.connect_to.pop(nbr)
    def get_weight(self, nbr):
        return self.connect_to[nbr]
    def get_connections(self):
        return [key.get_id() for key in self.connect_to.keys()]
    def set_id(self, id):
        self.id = id
    def get_id(self):
        return self.id
    def __str__(self):
        return f"{self.id} : {self.connect_to}"
    
class Graph:
    def __init__(self):
        self.vert_list = {}
    def add_vert(self, vert):
        self.vert_list[vert] = Vertex(vert)
    def del_vert(self, vert):
        if vert in self.vert_list:
            self.vert_list.pop(vert)
    def get_vert(self, vert):
        return self.vert_list[vert]
    def add_edge(self, source, dest, cost=0):
        if source not in self.vert_list:
            self.add_vert(source)
        if dest not in self.vert_list:
            self.add_vert(dest)
        self.vert_list[source].add_neighbor(dest, cost)
    def get_vertices(self):
        return self.vert_list.keys()
    def __contains__(self, vert):
        return vert in self.vert_list
    def __iter__(self):
        return iter(self.vert_list.values())
    def size(self):
        return len(self.vert_list.values())
    '''def get_edges(self): #nÃ£o consegue get_connections
        edges = []
        for vert in self.vert_list.values():
            edges.append(vert.get_id())
        return edges'''
    

#TESTE VERTEX
v1 = Vertex('V1')
v2 = Vertex('V2')
v1.add_neighbor(v2, 2)
print(v1)
v1.add_neighbor(v2, 5)
print(v1.get_weight(v2))
print(v1.get_connections())
v1.del_neighbor(v2)
print(v1)

#TESTE GRAFO
g1 = Graph()
print(g1.get_vertices())
g1.add_edge('v1', 'v2', 2)
print(g1.get_vertices())
print('v1' in g1)
print(g1.size())
print(g1.get_edges())